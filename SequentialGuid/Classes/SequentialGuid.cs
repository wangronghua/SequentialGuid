//-----------------------------------------------------------------------
// <copyright file="SequentialGuid.cs" company="Jeremy H. Todd">
//     Copyright © Jeremy H. Todd 2011
// </copyright>
//-----------------------------------------------------------------------
namespace SequentialGuid
{
  using System;
  using System.Diagnostics.Contracts;
  using System.Security.Cryptography;

  /// <summary>
  /// Contains methods for creating sequential GUID values.
  /// </summary>
  public static partial class SequentialGuid
  {
    #region Static Fields
    /// <summary>
    /// Provides cryptographically strong random data for GUID creation.
    /// </summary>
    private static readonly RNGCryptoServiceProvider RandomGenerator = new RNGCryptoServiceProvider();
    #endregion


    //3d81e90b-4b23-05f7-173c-39e55b989aaf
    //d2c147ba-7c92-4da7-a072-39e55b989ab9
    //ab4dc8b5-1200-d56e-1612-39e55b989ac3
    //51b742ae-bbf1-63b0-c64c-39e55b989acd
    //6cc3fb3f-9a56-f500-bb74-39e55b989ad7
    //fde6368d-6684-779a-4381-39e55b989ae1
    /// <summary>
    /// Returns a new GUID value which is sequentially ordered when formatted as
    /// a string, a byte array, or ordered by the least significant six bytes of the
    /// Data4 block, as specified by <paramref name="guidType" />.
    /// </summary>
    /// <param name="guidType">
    /// Specifies the type of sequential GUID (i.e. whether sequential as a string,
    /// as a byte array, or according to the Data4 block.  This can affect
    /// performance under various database types; see below.
    /// </param>
    /// <returns>
    /// A <see cref="Guid" /> structure whose value is created by replacing
    /// certain randomly-generated bytes with a sequential timestamp.
    /// </returns>
    /// <remarks>
    /// <para>
    /// This method creates a new GUID value which combines a random component
    /// with the current timestamp, also known as a COMB.  The general concept
    /// is outlined in Jimmy Nilsson's article "The Cost of GUIDs as Primary Keys",
    /// and involves replacing either the least significant or most significant
    /// six bytes of the GUID with the current timestamp.  This reduces the
    /// random component of the GUID from 16 bytes to 10 bytes, but this is
    /// still sufficient to prevent a collision under most real-world circumstances.
    /// </para>
    /// <para>
    /// The purpose of sequential GUIDs is not to promote the use of GUIDs as
    /// sortable entities.  In fact, GUIDs generated very close together may
    /// have the same timestamp and are not guaranteed to be sequentially ordered
    /// at all.  The intent is to increase performance when doing repeated
    /// inserts into database tables that have a clustered index on a GUID
    /// column, so that later entries do not have to be inserted into the middle
    /// of the table, but can simply be appended to the end.
    /// </para>
    /// <para>
    /// According to experiments, Microsoft SQL Server sorts GUID values using
    /// the least significant six bytes of the Data4 block; therefore, GUIDs being
    /// generated for use with SQL Server should pass a <paramref name="guidType" /> 
    /// value of <c>SequentialAtEnd</c>.  GUIDs generated for most other database
    /// types should be passed a <paramref name="guidType" /> value of
    /// <c>SequentialAsString</c> or <c>SequentialAsByteArray</c>.
    /// </para>
    /// <para>
    /// Various standards already define a time-based UUID; however, the
    /// format specified by these standards splits the timestamp into
    /// several components, limiting its usefulness as a sequential ID.
    /// Additionally, the format used for such UUIDs is not compatible
    /// with the GUID ordering on Microsoft SQL Server.
    /// </para>
    /// </remarks>
    public static Guid Create(SequentialGuidType guidType)
    {
      // We start with 16 bytes of cryptographically strong random data.
      byte[] randomBytes = new byte[10];
      SequentialGuid.RandomGenerator.GetBytes(randomBytes);

      // An alternate method: use a normally-created GUID to get our initial
      // random data:
      // byte[] randomBytes = Guid.NewGuid().ToByteArray();
      // This is faster than using RNGCryptoServiceProvider, but I don't
      // recommend it because the .NET Framework makes no guarantee of the
      // randomness of GUID data, and future versions (or different
      // implementations like Mono) might use a different method.

      // Now we have the random basis for our GUID.  Next, we need to
      // create the six-byte block which will be our timestamp.

      // We start with the number of milliseconds that have elapsed since
      // DateTime.MinValue.  This will form the timestamp.  There's no use
      // being more specific than milliseconds, since DateTime.Now has
      // limited resolution.

      // Using millisecond resolution for our 48-bit timestamp gives us
      // about 5900 years before the timestamp overflows and cycles.
      // Hopefully this should be sufficient for most purposes. :)
      long timestamp = DateTime.UtcNow.Ticks / 10000L;

      // Then get the bytes
      byte[] timestampBytes = BitConverter.GetBytes(timestamp);

      // Since we're converting from an Int64, we have to reverse on
      // little-endian systems.
      if (BitConverter.IsLittleEndian)
      {
        Array.Reverse(timestampBytes);
      }

      byte[] guidBytes = new byte[16];

      switch (guidType)
      {
        case SequentialGuidType.SequentialAsString:
        case SequentialGuidType.SequentialAsBinary:

          // For string and byte-array version, we copy the timestamp first, followed
          // by the random data.
          Buffer.BlockCopy(timestampBytes, 2, guidBytes, 0, 6);
          Buffer.BlockCopy(randomBytes, 0, guidBytes, 6, 10);

          // If formatting as a string, we have to compensate for the fact
          // that .NET regards the Data1 and Data2 block as an Int32 and an Int16,
          // respectively.  That means that it switches the order on little-endian
          // systems.  So again, we have to reverse.
          if (guidType == SequentialGuidType.SequentialAsString && BitConverter.IsLittleEndian)
          {
            Array.Reverse(guidBytes, 0, 4);
            Array.Reverse(guidBytes, 4, 2);
          }

          break;

        case SequentialGuidType.SequentialAtEnd:

          // For sequential-at-the-end versions, we copy the random data first,
          // followed by the timestamp.
          Buffer.BlockCopy(randomBytes, 0, guidBytes, 0, 10);
          Buffer.BlockCopy(timestampBytes, 2, guidBytes, 10, 6);
          break;
      }

      return new Guid(guidBytes);
        }


        #region  另外可用方法，还是用上面的性能好些
        //================================================================
        //634d348e-37d6-404b-adc0-a8ab0017dbb3
        //ea04b241-c1d2-4202-94b6-a8ab0017dbb6
        //e3863e4b-3cd4-4d80-bf2a-a8ab0017dbb9
        //4322956f-0112-479d-a311-a8ab0017dbbc
        //d369dc64-4624-4b2b-aafe-a8ab0017dbbf
        //1e5a7f60-58b9-4d91-9cdf-a8ab0017dbc2
        ///<summary>
        /// 返回 GUID 用于数据库操作，特定的时间代码可以提高检索效率
        /// 
        /// 与sql生成的一直，缺点是时间没有除10000导致很容易重复，另外生成的性能不够好
        /// 
        //与下面sql生成的一致
        //DECLARE @aGuid UNIQUEIDENTIFIER
        //SET @aGuid = CAST(CAST(NEWID() AS BINARY(10)) 
        //+ CAST(GETDATE() AS BINARY(6)) AS UNIQUEIDENTIFIER)
        /// 
        /// </summary>
        /// <returns>COMB (GUID 与时间混合型) 类型 GUID 数据</returns>
        public static Guid Create_out(SequentialGuidType guidType)
        {
            byte[] guidArray = System.Guid.NewGuid().ToByteArray();
            DateTime baseDate = new DateTime(1900, 1, 1);
            DateTime now = DateTime.Now;
            // Get the days and milliseconds which will be used to build the byte string 
            TimeSpan days = new TimeSpan(now.Ticks - baseDate.Ticks);
            TimeSpan msecs = new TimeSpan(now.Ticks - (new DateTime(now.Year, now.Month, now.Day).Ticks));

            // Convert to a byte array 
            // Note that SQL Server is accurate to 1/300th of a millisecond so we divide by 3.333333 
            byte[] daysArray = BitConverter.GetBytes(days.Days);
            byte[] msecsArray = BitConverter.GetBytes((long)(msecs.TotalMilliseconds / 3.333333));

            // Reverse the bytes to match SQL Servers ordering 
            Array.Reverse(daysArray);
            Array.Reverse(msecsArray);

            // Copy the bytes into the guid 
            Buffer.BlockCopy(daysArray, daysArray.Length - 2, guidArray, guidArray.Length - 6, 2);
            Buffer.BlockCopy(msecsArray, msecsArray.Length - 4, guidArray, guidArray.Length - 4, 4);

            return new System.Guid(guidArray);
        }
        //================================================================
        /// <summary>
        /// 从 SQL SERVER 返回的 GUID 中生成时间信息
        /// </summary>
        /// <param name="guid">包含时间信息的 COMB </param>
        /// <returns>时间</returns>
        public static DateTime GetDateFromComb(System.Guid guid)
        {
            DateTime baseDate = new DateTime(1900, 1, 1);
            byte[] daysArray = new byte[4];
            byte[] msecsArray = new byte[4];
            byte[] guidArray = guid.ToByteArray();

            // Copy the date parts of the guid to the respective byte arrays. 
            Array.Copy(guidArray, guidArray.Length - 6, daysArray, 2, 2);
            Array.Copy(guidArray, guidArray.Length - 4, msecsArray, 0, 4);

            // Reverse the arrays to put them into the appropriate order 
            Array.Reverse(daysArray);
            Array.Reverse(msecsArray);

            // Convert the bytes to ints 
            int days = BitConverter.ToInt32(daysArray, 0);
            int msecs = BitConverter.ToInt32(msecsArray, 0);

            DateTime date = baseDate.AddDays(days);
            date = date.AddMilliseconds(msecs * 3.333333);

            return date;
        }
        #endregion

    }
}